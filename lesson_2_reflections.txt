1 -
What happens when you initialize a repository? Why do you need to do it?

A .git folder appears, to store what changes will be made.
A commit isn't made.


2 - 
How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is more like a flagging system for what will be committed.
It's useful because it means not everything needs to be committed. It also means you have to specifically tell git what you want to upload. It's a layer of protection from accidentally overwriting something.

3 -
How can you use the staging area to make sure you have one commit per logical change?

The staging area makes it easy to see what has changed. You'd be able to see what files you've changed, and if we're looking for only one commit per logical change, you'd see only one file changed (unless the logical change affects multiple files!) Anyway, it's easy to see what's changed.

4 -
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are good for trying out new features, or for developing slightly different versions of the program.
Doing it in one branch could be possible, but if changes need to be made to the regular version, it would get complicated. Since branches can be merged, there's no issue with having separate branches and then merging them when needed.

5 -
How do the diagrams help you visualize the branch structure?

Quite well. They offer a clear way to see where branches were made, and it's easy to see how the commits made in separate branches may occur around the same time, but are not connected to each other.
Doing this without a visualisation would be possible, but time consuming - lots of looking at numbers.

6 - 
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches together combines the files in a way that gives you features from both branches. The diagram shows that the branches were seperate and now come together, which is handy because you can then see which commits are from what branch in a way that just git log doesn't show.

7 - 
What are the pros and cons of Git¡¯s automatic merging vs. always doing merges manually?

It's better to have an automatic merging becuase it saves you having to try and squash two codes together.
It's nice that git has its conflict system because it draws attention directly to what needs to be addressed.